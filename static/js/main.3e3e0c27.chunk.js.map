{"version":3,"sources":["App.js","useMedia.js","useMeasure.js","serviceWorker.js","index.js"],"names":["App","useEffect","getImage","useState","items","set","a","axios","get","i","response","image","data","x","y","id","v","width","author","height","Math","z","download_url","console","error","columns","queries","values","defaultValue","match","findIndex","q","matchMedia","matches","value","handler","window","addEventListener","removeEventListener","useMedia","ref","useRef","left","top","bounds","ResizeObserver","entry","contentRect","ro","observe","current","disconnect","useMeasure","bind","setInterval","shuffle","heights","Array","fill","gridItems","map","child","column","indexOf","xy","transitions","useTransition","item","from","opacity","enter","update","leave","config","mass","tension","friction","trail","storedTodo","JSON","parse","localStorage","getItem","select","setSelect","setItem","stringify","imageSelect","e","target","log","includes","del","filter","download","datas","url","method","responseType","then","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","confirm","Modal","showConfirm","title","onOk","length","splice","onCancel","className","style","props","rest","key","div","transform","interpolate","backgroundImage","onClick","overlay","Item","class","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e3e0c27.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useTransition, a } from \"react-spring\";\nimport shuffle from \"lodash/shuffle\";\nimport useMeasure from \"./useMeasure\";\nimport useMedia from \"./useMedia\";\nimport \"antd/dist/antd.css\";\n\nimport \"./App.css\";\nimport { Modal, Button, Menu, Dropdown, Icon, message } from \"antd\";\n\nimport * as Math from \"mathjs\";\nimport axios from \"axios\";\n\nfunction App() {\n  useEffect(() => {\n    getImage();\n  }, []);\n  const [items, set] = useState([]);\n  async function getImage() {\n    try {\n      const response = await axios.get(\"https://picsum.photos/v2/list\");\n      let image = response.data;\n\n      for (var i in image) {\n        let x = \"https://picsum.photos/id/\";\n        let y = image[i].id;\n        let v = image[i].width;\n        image[i].author = `${x}${y}/${v}/${image[i].height}`;\n        image[i].height = Math.floor(Math.random() * 650) + 300;\n        let z = image[i].height;\n\n        image[i].download_url = `url(${x}${y}/${v}/${z})`;\n      }\n      set(image);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  const columns = useMedia(\n    [\"(min-width: 1500px)\", \"(min-width: 1000px)\", \"(min-width: 600px)\"],\n    [5, 4, 3],\n    2\n  );\n\n  // Measure the width of the container element\n  const [bind, { width }] = useMeasure();\n  // Hold items and shuffle them every 2 seconds\n  useEffect(() => void setInterval(() => set(shuffle), 60000), []);\n\n  // Form a grid of stacked items\n  let heights = new Array(columns).fill(0); // Each column gets a height starting with zero\n  let gridItems = items.map((child, i) => {\n    const column = heights.indexOf(Math.min(...heights)); // Basic masonry-grid placing, puts tile into the smallest column using Math.min\n    const xy = [\n      (width / columns) * column,\n      (heights[column] += child.height / 2) - child.height / 2\n    ]; // X = container width / number of columns * column index, Y = it's just the height of the current column\n    return {\n      ...child,\n      xy,\n      width: width / columns,\n      height: child.height / 2\n    };\n  });\n  // Turn the static grid values into animated transitions, any addition, removal or change will be animated\n  const transitions = useTransition(gridItems, item => item.download_url, {\n    from: ({ xy, width, height }) => ({ xy, width, height, opacity: 0 }),\n    enter: ({ xy, width, height }) => ({ xy, width, height, opacity: 1 }),\n    update: ({ xy, width, height }) => ({ xy, width, height }),\n    leave: { height: 0, opacity: 0 },\n    config: { mass: 5, tension: 500, friction: 100 },\n    trail: 25\n  });\n  var storedTodo = JSON.parse(localStorage.getItem(\"select\")) || [];\n  const [select, setSelect] = useState(storedTodo);\n  useEffect(() => {\n    localStorage.setItem(\"select\", JSON.stringify(select));\n  }, [select]); //saving in local storage\n\n  const imageSelect = e => {\n    const item = e.target.id;\n    console.log(select);\n    if (select.includes(item)) {\n      let del = select.filter(select => {\n        return select !== item;\n      });\n      setSelect(del);\n    } else {\n      setSelect(select => [...select, item]);\n    }\n  };\n  const myFunction = e => {\n    const items = e.target.value;\n\n    var x = document.getElementById(items);\n    if (x.className.indexOf(\"w3-show\") == -1) {\n      x.className += \" w3-show\";\n    } else {\n      x.className = x.className.replace(\" w3-show\", \"\");\n    }\n  };\n  const download = e => {\n    // fake server request, getting the file url as response\n    var datas = e.target.id;\n    axios({\n      url: datas,\n      method: \"GET\",\n      responseType: \"blob\" // important\n    }).then(response => {\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", \"file.jpg\");\n      document.body.appendChild(link);\n      link.click();\n    });\n  };\n  const { confirm } = Modal;\n  const showConfirm = e => {\n    var data = e.target.id;\n    //console.log(items);\n    //console.log(data);\n    //setSelect(del);\n    confirm({\n      title: \"Do you want to delete these items?\",\n      onOk() {\n        for (var i = 0; i < items.length - 1; i++) {\n          if (items[i].id == data) {\n            items.splice(i, 1);\n          }\n          set(items);\n        }\n      },\n      onCancel() {}\n    });\n  };\n\n  return (\n    <div {...bind} className=\"list\" style={{ height: Math.max(...heights) }}>\n      {transitions.map(({ item, props: { xy, ...rest }, key }) => (\n        <a.div\n          key={key}\n          style={{\n            transform: xy.interpolate((x, y) => `translate3d(${x}px,${y}px,0)`),\n            ...rest\n          }}\n        >\n          {\n            <div\n              className={select.includes(item.id) ? \"imagediv \" : \"nodiv \"}\n              style={{ backgroundImage: item.download_url }}\n              onClick={imageSelect}\n              id={item.id}\n            >\n              <Dropdown\n                className=\"butt\"\n                overlay={\n                  <Menu>\n                    <Menu.Item key=\"new\">\n                      <a\n                        href={item.author}\n                        class=\"w3-bar-item w3-button\"\n                        target=\"_blank\"\n                      >\n                        Open in new tab\n                      </a>\n                    </Menu.Item>\n                    <Menu.Item key=\"download\">\n                      <a\n                        id={item.author}\n                        onClick={download}\n                        class=\"w3-bar-item w3-button\"\n                      >\n                        Download\n                      </a>\n                    </Menu.Item>\n                    <Menu.Item key=\"delete\">\n                      <a\n                        class=\"w3-bar-item w3-button\"\n                        id={item.id}\n                        onClick={showConfirm}\n                      >\n                        Delete\n                      </a>\n                    </Menu.Item>\n                  </Menu>\n                }\n              >\n                <Button className=\"box\">...</Button>\n              </Dropdown>\n              ,\n            </div>\n          }\n        </a.div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default function useMedia(queries, values, defaultValue) {\r\n  const match = () =>\r\n    values[queries.findIndex(q => matchMedia(q).matches)] || defaultValue;\r\n  const [value, set] = useState(match);\r\n  useEffect(() => {\r\n    const handler = () => set(match);\r\n    window.addEventListener(\"resize\", handler);\r\n    return () => window.removeEventListener(handler);\r\n  }, []);\r\n  return value;\r\n}\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\nexport default function useMeasure() {\r\n  const ref = useRef();\r\n  const [bounds, set] = useState({ left: 0, top: 0, width: 0, height: 0 });\r\n  const [ro] = useState(\r\n    () => new ResizeObserver(([entry]) => set(entry.contentRect))\r\n  );\r\n  useEffect(() => (ro.observe(ref.current), ro.disconnect), []);\r\n  return [{ ref }, bounds];\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}